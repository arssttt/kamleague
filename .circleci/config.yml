# Elixir CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-elixir/ for more details
version: 2
jobs:
  test:
    docker:
      - image: circleci/elixir:1.9
        environment:
          MIX_ENV: test
          PGHOST: 127.0.0.1
          POSTGRES_USER: circleci
      - image: circleci/postgres:10.1-alpine
        environment:
          POSTGRES_USER: circleci

    working_directory: ~/kamleague/website
    steps:
      - checkout
      - run:
          name: Set up hex and rebar
          command: mix local.hex --force && mix local.rebar --force

      - restore_cache:
          keys:
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache

      - restore_cache:
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache

      - run:
          name: Install and compile Elixir dependencies
          command: mix do deps.get, compile

      - save_cache:
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:
          key: v1-mix-cache
          paths: "deps"

      - save_cache:
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"
      - save_cache:
          key: v1-build-cache
          paths: "_build"

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Check Elixir formatting
          command: mix format --check-formatted

      - run:
          name: Create dir for test results
          command: mkdir -p /tmp/test-results

      - run:
          name: Run tests
          command: mix test

      - store_test_results:
          path: /tmp/test-results

  deploy:
    docker:
      - image: circleci/elixir:1.9
        environment:
          BUILD_PATH: ~/kamleague/builds
          MIX_ENV: prod
          SERVICE_NAME: kamleague-website.service

    working_directory: ~/kamleague/website
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "17:5b:cc:32:77:0d:41:0b:bf:20:d0:54:3f:7f:b7:ef"

      - run:
          name: Install OpenSSL
          command: sudo apt-get install -y openssl

      - run:
          name: Install rsync
          command: sudo apt install -y rsync

      - run:
          name: Move the project to the server
          command:
            rsync -av --chown=deploy -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" --rsync-path="sudo rsync"
            ~/kamleague/website deploy@beta.kamleague.com:$BUILD_PATH --delete

      - run:
          name: Build the project assets
          command: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t deploy@beta.kamleague.com "cd kamleague/builds/website && ./build.sh"

      - run:
          name: Copy the project
          command: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t deploy@beta.kamleague.com "sudo cp -r kamleague/builds/website kamleague"

      - run:
          name: Build the release
          command: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t deploy@beta.kamleague.com "cd kamleague/website && MIX_ENV=prod mix release --overwrite"

      - run:
          name: Stop service
          command: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t deploy@beta.kamleague.com sudo systemctl stop $SERVICE_NAME

      - run:
          name: Start service
          command: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t deploy@beta.kamleague.com sudo systemctl start $SERVICE_NAME

workflows:
  version: 2
  test-deploy:
    jobs:
      - test
